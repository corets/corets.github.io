{"version":3,"sources":["webpack:///../src/pages/use-stream.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"wPAQaA,G,UAAe,S,0MAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,cADR,cAGA,wDAAuC,6BAAGC,WAAW,KAAQ,CACzD,KAAQ,eAD2B,qBAAvC,qEAEoG,0BAAYA,WAAW,KAAvB,YAFpG,sEAE+N,0BAAYA,WAAW,KAAvB,YAF/N,KAEyR,0BAAYA,WAAW,KAAvB,aAFzR,UAGA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,kCAIL,iBAAQ,CACN,GAAM,aACL,0BAAYA,WAAW,MAAvB,cACH,6DACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,oyB,wMAmCTJ,EAAWK,gBAAiB","file":"component---src-pages-use-stream-mdx-d271f81fb1ff63753ab9.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/mkt/Development/corets/corets/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"use-stream\"\n    }}>{`Use Stream`}</h1>\n    <p>{`This package is built on top of `}<a parentName=\"p\" {...{\n        \"href\": \"/use-async\"\n      }}>{`@corets/use-async`}</a>{`. It adds support for repeating async operations - streams. Since `}<inlineCode parentName=\"p\">{`useAsync`}</inlineCode>{` is used under the hood, you'll have access to the same methods as `}<inlineCode parentName=\"p\">{`cancel()`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`refresh()`}</inlineCode>{`, etc.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`yarn add @corets/use-stream\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"usestream\"\n    }}><inlineCode parentName=\"h2\">{`useStream`}</inlineCode></h2>\n    <p>{`Create a repeating, async operation.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React, { useState } from \"react\"\nimport { useStream } from \"@corets/use-stream\"\n\nconst fetchDateTime = async () => new Date().toTimeString()\n\nconst Example = () => {\n  const dateStream = useStream(fetchDateTime, 1000)\n  const handleCancel = () => dateStream.cancel()\n  const handleResume = () => dateStream.refresh()\n\n  return (\n    <div>\n      Current date time is: { dateStream.result }\n\n      {dateStream.isLoading && (\n        <div>Loading for the first time</div>\n      )}\n\n      {!dateStream.isLoading && dateStream.isRefreshing && (\n        <div>Refreshing data</div>\n      )}\n\n      <div>\n        {dateStream.isCancelled ? <button onClick={handleResume}>Resume</button> : <button onClick={handleCancel}>Cancel</button>}\n      </div>\n    </div>\n  )\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}