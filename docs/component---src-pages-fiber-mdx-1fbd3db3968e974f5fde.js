(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{"7sYw":function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return c})),n.d(t,"default",(function(){return l}));var r=n("Fcif"),a=n("+I+c"),o=(n("mXGw"),n("/FXl")),i=n("BIGe"),c=(n("aD51"),{});void 0!==c&&c&&c===Object(c)&&Object.isExtensible(c)&&!c.hasOwnProperty("__filemeta")&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/pages/fiber.mdx"}});var s={_frontmatter:c},b=i.a;function l(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)(b,Object(r.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h1",{id:"fiber"},"Fiber"),Object(o.b)("p",null,"Statically typed client for remote, RPC style communication. Consume your backend API through a statically typed facade, without any code generation, without writing any custom API calls or duplicating your backend types on the client side. Fibers work in any TypeScript setup and are fully implementation agnostic."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-bash"}),"yarn add @corets/fiber\n")),Object(o.b)("h2",{id:"quick-start"},"Quick start"),Object(o.b)("p",null,"First you need to create a fiber and register all the methods that you want to expose accordingly:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),'import { createFiber } from "@corets/fiber"\n\nconst makeResponse = (status: number, result: any) => {\n  return { status, result }\n}\n\nconst pingPong = (input: string) => {\n  return input === "ping" ? "pong" : "ping"\n}\n\nexport const fiber = createFiber({ pingPong })\nexport type MyFiber = typeof fiber\n')),Object(o.b)("p",null,"Next you need to setup your server, we'll be using express in this example:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-tsx"}),'import express from "express"\nimport { fiber } from "./fiber"\n\nconst app = express()\n\napp.post("/fiber:method", async (req, res) => {\n  try {\n    const method = req.params?.method\n    const args = Object.values(req?.body)\n    const response = await fiber.call(method, ...args)\n\n    res.status(response.status).json(response.result)\n  } catch (err) {\n    console.error(err)\n    res.status(500).send()\n  }\n})\n\napp.listen(1337)\n')),Object(o.b)("p",null,"Next you create a consumer for your fiber, on the client side, we'll use axios in this example:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),'import { createFiberClient } from "@corets/fiber"\nimport axios from "axios"\nimport type { MyFiber } from "./fiber"\n\nconst client = createFiberClient<MyFiber>(async (method, ...args) => {\n  const res = await axios.post(`http://localhost:1337/fiber/${method}`, args)\n\n  return res.data\n})\n')),Object(o.b)("p",null,"Now you have a statically typed, RPC style client, that you can consume immediately on the client side (web, node, mobile):"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),'import { client } from "./client"\n\n// returns pong\nconst answer = await client.pingPong("ping")\n')),Object(o.b)("h2",{id:"createfiber"},Object(o.b)("inlineCode",{parentName:"h2"},"createFiber")),Object(o.b)("p",null,"Create a new fiber instance on the producer side:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),'import { createFiber } from "@corets/fiber"\n\nconst myMethod = () => "hallo"\n\nconst fiber = createFiber({ myMethod })\n')),Object(o.b)("h2",{id:"createfiberclient"},Object(o.b)("inlineCode",{parentName:"h2"},"createFiberClient")),Object(o.b)("p",null,"Create a statically typed fiber client:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),'import { createFiberClient } from "@corets/fiber"\nimport type { fiber } from "./fiber"\n\nconst client = createFiberClient<typeof fiber>((method, ...args) => {\n  // proxy request to producer\n})\n')))}void 0!==l&&l&&l===Object(l)&&Object.isExtensible(l)&&!l.hasOwnProperty("__filemeta")&&Object.defineProperty(l,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/pages/fiber.mdx"}}),l.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-fiber-mdx-1fbd3db3968e974f5fde.js.map