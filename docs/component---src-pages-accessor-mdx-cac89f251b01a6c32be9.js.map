{"version":3,"sources":["webpack:///../src/pages/accessor.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"uPAQaA,G,UAAe,S,wMAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,YADR,YAGA,sEAAqD,6BAAGC,WAAW,KAAQ,CACvE,KAAQ,2FADyC,SAArD,yTAGA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,gCAIL,iBAAQ,CACN,GAAM,kBACL,0BAAYA,WAAW,MAAvB,mBACH,4DAA2C,0BAAYA,WAAW,KAAvB,kBAA3C,KACA,2IACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,yHAML,0EACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,oDAKL,qBAAG,sBAAQA,WAAW,KAAnB,qHACH,oOACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,6aAqBL,yHACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,2EAIL,qBAAG,sBAAQA,WAAW,KAAnB,6EACH,iBAAQ,CACN,GAAM,qBACL,0BAAYA,WAAW,MAAvB,uBACH,qDACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,+KASL,iBAAQ,CACN,GAAM,uBACL,0BAAYA,WAAW,MAAvB,yBACH,kFACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,kLASL,iBAAQ,CACN,GAAM,qBACL,0BAAYA,WAAW,MAAvB,uBACH,6EACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,0KASL,iBAAQ,CACN,GAAM,uBACL,0BAAYA,WAAW,MAAvB,yBACH,0GACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,6KASL,iBAAQ,CACN,GAAM,qBACL,0BAAYA,WAAW,MAAvB,uBACH,iDACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,yKASL,iBAAQ,CACN,GAAM,uBACL,0BAAYA,WAAW,MAAvB,yBACH,8EACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,kL,sMAaTJ,EAAWK,gBAAiB","file":"component---src-pages-accessor-mdx-cac89f251b01a6c32be9.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/mkt/Development/corets/corets/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"accessor\"\n    }}>{`Accessor`}</h1>\n    <p>{`Statically typed object accessor based on the `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy\"\n      }}>{`Proxy`}</a>{` API. The main purpose of this package is to allow dynamic object access in a static manner, without having to rely on dynamic, string based keys. Code won't compile if you try to access a field that does not exist! You keep control over what is returned from the getter, by providing a custom access handler.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`yarn add @corets/accessor\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"createaccessor\"\n    }}><inlineCode parentName=\"h2\">{`createAccessor`}</inlineCode></h2>\n    <p>{`Create an accessor instance of type `}<inlineCode parentName=\"p\">{`ObjectAccessor`}</inlineCode>{`.`}</p>\n    <p>{`One can omit the custom access handler logic and simply use accessor as a statically typed facade for your object:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { createAccessor } from \"@corets/accessor\"\n\nconst accessor = createAccessor({ some: { field: \"value\" } })\n`}</code></pre>\n    <p>{`Now you can statically access every object field:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`// returns \"value\"\naccessor.some.field.get()\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Note: If a custom access handler is omitted, a default one is used instead, that simply returns the value as is.`}</strong></p>\n    <p>{`Or one can provide a custom access handler to customise object access behaviour. Below is an example of how one could statically access translations, proxied by a translation library, using the accessor.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { createAccessor } from \"@corets/accessor\"\n\nconst translations = {\n  pages: {\n    home: {\n      title: \"Home {replacement}\"\n    },\n    about: {\n      title: \"About {replacement}\"\n    }\n  }\n}\n\nconst translator = createSomeSortOfTranslator(translations)\n\nconst locales = createAccessor(translations, (source, key, ...replacements: any[]): string => {\n  return translator.get(key, { replacements })\n})\n`}</code></pre>\n    <p>{`Now one can indirectly access translations through the accessor, without using any dynamic keys.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`const translatedHomePageTitle = locales.pages.home.title.get(\"Page\")\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Note: Trying to access a missing key will result in a compilation error.`}</strong></p>\n    <h2 {...{\n      \"id\": \"objectaccessorkey\"\n    }}><inlineCode parentName=\"h2\">{`ObjectAccessor.key`}</inlineCode></h2>\n    <p>{`Get absolute key of a field:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { createAccessor } from \"@corets/accessor\"\n\nconst accessor = createAccessor({ some: { field: \"value\" } })\n\n// returns \"some.field\"\naccessor.some.field.key()\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"objectaccessorkeyat\"\n    }}><inlineCode parentName=\"h2\">{`ObjectAccessor.keyAt`}</inlineCode></h2>\n    <p>{`Get absolute key of a field, bypassing the static typing:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { createAccessor } from \"@corets/accessor\"\n\nconst accessor = createAccessor({ some: { field: \"value\" } })\n\n// returns \"some.field\"\naccessor.some.keyAt(\"field\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"objectaccessorget\"\n    }}><inlineCode parentName=\"h2\">{`ObjectAccessor.get`}</inlineCode></h2>\n    <p>{`Get value of a field coming from the access handler:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { createAccessor } from \"@corets/accessor\"\n\nconst accessor = createAccessor({ some: { field: \"value\" } })\n\n// returns \"value\"\naccessor.some.field.get()\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"objectaccessorgetat\"\n    }}><inlineCode parentName=\"h2\">{`ObjectAccessor.getAt`}</inlineCode></h2>\n    <p>{`Get value of a field coming from the access handler, bypassing the static typing:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { createAccessor } from \"@corets/accessor\"\n\nconst accessor = createAccessor({ some: { field: \"value\" } })\n\n// returns \"value\"\naccessor.some.getAt(\"field\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"objectaccessorhas\"\n    }}><inlineCode parentName=\"h2\">{`ObjectAccessor.has`}</inlineCode></h2>\n    <p>{`Check if a field exists:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { createAccessor } from \"@corets/accessor\"\n\nconst accessor = createAccessor({ some: { field: \"value\" } })\n\n// returns \"true\"\naccessor.some.field.has()\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"objectaccessorhasat\"\n    }}><inlineCode parentName=\"h2\">{`ObjectAccessor.hasAt`}</inlineCode></h2>\n    <p>{`Check if a field exists, bypassing the static typing:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { createAccessor } from \"@corets/accessor\"\n\nconst accessor = createAccessor({ some: { field: \"value\" } })\n\n// returns \"true\"\naccessor.some.hasAt(\"field\")\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}