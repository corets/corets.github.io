{"version":3,"sources":["webpack:///../src/pages/fiber.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"yPAQaA,G,UAAe,S,qMAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,SADR,SAGA,oVACA,uBAAK,gCAAMC,WAAW,OAAU,CAC5B,UAAa,kBADZ,6BAIL,iBAAQ,CACN,GAAM,eADR,eAGA,2HACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,+UAeL,oGACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,kcAsBL,wHACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,oTAYL,oJACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,yGAOL,iBAAQ,CACN,GAAM,eACL,0BAAYA,WAAW,MAAvB,gBACH,0EACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,+HAQL,qBAAG,sBAAQA,WAAW,KAAnB,SAAH,2BAAwE,6BAAGA,WAAW,KAAQ,CAC1F,KAAQ,iBAD4D,eAAxE,KAGA,iBAAQ,CACN,GAAM,qBACL,0BAAYA,WAAW,MAAvB,sBACH,gEACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,2MASL,qBAAG,sBAAQA,WAAW,KAAnB,SAAH,2BAAwE,6BAAGA,WAAW,KAAQ,CAC1F,KAAQ,uBAD4D,qBAAxE,KAGA,iBAAQ,CACN,GAAM,eACL,0BAAYA,WAAW,MAAvB,gBACH,iHACA,iBAAQ,CACN,GAAM,mBACL,0BAAYA,WAAW,MAAvB,qBACH,6EACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,kQAaL,iBAAQ,CACN,GAAM,qBACL,0BAAYA,WAAW,MAAvB,sBACH,wFACA,iBAAQ,CACN,GAAM,yBACL,0BAAYA,WAAW,MAAvB,2BACH,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,sX,mMAkBTJ,EAAWK,gBAAiB","file":"component---src-pages-fiber-mdx-a4cda60117edf73d8176.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/mkt/Development/corets/corets/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"fiber\"\n    }}>{`Fiber`}</h1>\n    <p>{`Statically typed client for remote, RPC style communication. Consume your backend API through a statically typed facade, without any code generation, without writing any custom API calls or duplicating your backend types on the client side. Fibers work in any TypeScript setup and are fully implementation agnostic.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`yarn add @corets/fiber\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"quick-start\"\n    }}>{`Quick start`}</h2>\n    <p>{`First you need to create a fiber and register all the methods that you want to expose accordingly:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { createFiber } from \"@corets/fiber\"\n\nconst makeResponse = (status: number, result: any) => {\n  return { status, result }\n}\n\nconst pingPong = (input: string) => {\n  return makeResponse(200, input === \"ping\" ? \"pong\" : \"ping\")\n}\n\nexport const fiber = createFiber({ pingPong })\nexport type MyFiber = typeof fiber\n`}</code></pre>\n    <p>{`Next you need to setup your server, we'll be using express in this example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import express from \"express\"\nimport { fiber } from \"./fiber\"\n\nconst app = express()\n\napp.post(\"/fiber/:method\", async (req, res) => {\n  try {\n    const method = req.params?.method\n    const args = Object.values(req?.body)\n    const response = await fiber.call(method, ...args)\n\n    res.status(response.status).json(response.result)\n  } catch (err) {\n    console.error(err)\n    res.status(500).send()\n  }\n})\n\napp.listen(1337)\n`}</code></pre>\n    <p>{`Next you create a consumer for your fiber, on the client side, we'll use axios in this example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { createFiberClient } from \"@corets/fiber\"\nimport axios from \"axios\"\nimport type { MyFiber } from \"./fiber\"\n\nexport const client = createFiberClient<MyFiber>(async (method, ...args) => {\n  const res = await axios.post(\\`http://localhost:1337/fiber/\\${method}\\`, args)\n\n  return res.data\n})\n`}</code></pre>\n    <p>{`Now you have a statically typed, RPC style client, that you can consume immediately on the client side (web, node, mobile):`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { client } from \"./client\"\n\n// returns pong\nconst answer = await client.pingPong(\"ping\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"createfiber\"\n    }}><inlineCode parentName=\"h2\">{`createFiber`}</inlineCode></h2>\n    <p>{`Create a new fiber instance on the producer side:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { createFiber } from \"@corets/fiber\"\n\nconst myMethod = () => \"hallo\"\n\nconst fiber = createFiber({ myMethod })\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Note:`}</strong>{` Returns an instance of `}<a parentName=\"p\" {...{\n        \"href\": \"#simplefiber\"\n      }}>{`SimpleFiber`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"createfiberclient\"\n    }}><inlineCode parentName=\"h2\">{`createFiberClient`}</inlineCode></h2>\n    <p>{`Create a statically typed fiber client:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { createFiberClient } from \"@corets/fiber\"\nimport type { fiber } from \"./fiber\"\n\nconst client = createFiberClient<typeof fiber>((method, ...args) => {\n  // proxy request to producer\n})\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Note:`}</strong>{` Returns an instance of `}<a parentName=\"p\" {...{\n        \"href\": \"#simplefiberclient\"\n      }}>{`SimpleFiberClient`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"simplefiber\"\n    }}><inlineCode parentName=\"h2\">{`SimpleFiber`}</inlineCode></h2>\n    <p>{`Statically typed facade that is used to bootstrap a fiber instance on the producer side.`}</p>\n    <h2 {...{\n      \"id\": \"simplefibercall\"\n    }}><inlineCode parentName=\"h2\">{`SimpleFiber.call`}</inlineCode></h2>\n    <p>{`Call a registered fiber method on the producer side:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { createFiber } from \"@corets/fiber\"\n\nconst fiber = createFiber({\n  greet (name: string) {\n    return \\`Hallo \\${name}!\\`\n  }\n})\n\n// method names and parameters are fully statically typed\nconst greeting = await fiber.call(\"greet\", \"John\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"simplefiberclient\"\n    }}><inlineCode parentName=\"h2\">{`SimpleFiberClient`}</inlineCode></h2>\n    <p>{`Statically typed client for a fiber, used on the consumer side.`}</p>\n    <h2 {...{\n      \"id\": \"simplefiberclientcall\"\n    }}><inlineCode parentName=\"h2\">{`SimpleFiberClient.call`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { createFiberClient } from \"@corets/fiber\"\nimport type { MyFiber } from \"./fiber\"\n\nconst client = createFiberClient<MyFiber>((method, ...args) => {\n  // bridge implementation\n})\n\n// method names and parameters are fully statically typed\nconst response = await client.call(\"greeting\", \"John\")\n// or\nconst response = await client.greeting(\"John\")\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}